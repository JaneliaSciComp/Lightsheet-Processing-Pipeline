function I = imgaussianAnisotropy(I, sigma, siz)% --------------------------------------------------------------------------------------------------------% | Anisotropic Gaussian filtering                                                                       |% | Original function (imgaussian) written by D. Kroon, University of Twente, September 2009             |% | Code modification to allow different sigmas by Fernando Amat, HHMI/Janelia Farm, September 17th 2010 |% --------------------------------------------------------------------------------------------------------% Note: If X is of type double, the MEX file is faster. For images of type single or int, this m-file is faster.if(~exist('siz', 'var'))    siz = sigma * 6;end;ndimsI = sum(size(I) > 1);if(length(sigma) ~= ndimsI)    error 'You must specify one sigma for each dimension of the image'end;% Filter each dimension with the 1D Gaussian kernelsif(ndimsI == 1)    % Make 1D Gaussian kernel    kk = 1;    x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);    H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));    H = H / sum(H(:));    I = imfilter(I, H, 'same', 'replicate');elseif(ndimsI == 2)    % Make 1D Gaussian kernel    kk = 1;    x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);    H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));    H = H / sum(H(:));    Hx = reshape(H, [length(H) 1]);        kk = 2;    x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);    H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));    H = H / sum(H(:));    Hy = reshape(H, [1 length(H)]);        I = imfilter(imfilter(I, Hx, 'same', 'replicate'), Hy, 'same', 'replicate');elseif(ndimsI == 3)    if(size(I, 3) < 4) % Detect if 3D or color image        % Make 1D Gaussian kernel        kk = 1;        x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);        H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));        H = H / sum(H(:));        Hx = reshape(H, [length(H) 1]);                kk = 2;        x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);        H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));        H = H / sum(H(:));        Hy = reshape(H, [1 length(H)]);        for k = 1:size(I, 3)            I(:, :, k) = imfilter(imfilter(I(:, :, k), Hx, 'same', 'replicate'), Hy, 'same', 'replicate');        end;    else        % Make 1D Gaussian kernel        kk = 1;        x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);        H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));        H = H / sum(H(:));        Hx = reshape(H, [length(H) 1 1]);                kk = 2;        x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);        H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));        H = H / sum(H(:));        Hy = reshape(H, [1 length(H) 1]);                kk = 3;        x = -ceil(siz(kk) / 2):ceil(siz(kk) / 2);        H = exp(-(x .^ 2 / (2 * sigma(kk) ^ 2)));        H = H / sum(H(:));        Hz = reshape(H, [1 1 length(H)]);                I = imfilter(imfilter(imfilter(I, Hx, 'same', 'replicate'), Hy, 'same', 'replicate'), Hz, 'same', 'replicate');    end;else    error('imgaussian:input', 'unsupported input dimension');end;